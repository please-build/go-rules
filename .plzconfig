[Please]
Version = >=17.2.0

[build]
hashcheckers = sha256

[Plugin "go"]
GoTool = //third_party/go:toolchain|go
Stdlib = //third_party/go:std
PleaseGoTool = //tools/please_go:bootstrap
ImportPath = github.com/please-build/go-rules
ValidateModuleVersions = true
CoverageRedesign = true

[Plugin "cc"]
Target = //plugins:cc

[Plugin "e2e"]
Target = //plugins:e2e
PleaseVersion = 16.26.1

[PluginDefinition]
Name = go

[PluginConfig "go_tool"]
DefaultValue = go
Help = A file path or build label for the go tool to use
Inherit = true

[PluginConfig "go_compile_tool"]
Help = A file path or build label for the go compile tool to use. If not set, go_tool will be used to find it.
Inherit = true
Optional = true

[PluginConfig "go_link_tool"]
Help = A file path or build label for the go link tool to use. If not set, go_tool will be used to find it.
Inherit = true
Optional = true

[PluginConfig "stdlib"]
Optional = true
Help = The build label for a go_stdlib target used to re-compile the standard library for different architectures and build modes.
Inherit = true

[PluginConfig "require_licences"]
DefaultValue = false
Type = bool
Inherit = true
Help = If set, the licences field on go_module and go_repo will be mandatory

[PluginConfig "validate_module_version"]
DefaultValue = false
Type = bool
Help = If set, the values of go_mod_download's module and version parameters will be validated.

[PluginConfig "import_path"]
Help = The base import path when compiling first party Go code. This usually is set to the module name in go.mod.
Optional = true

[PluginConfig "cc_tool"]
DefaultValue = cc
Help = The C compiler to use with cgo rules
Inherit = true
Optional = true

[PluginConfig "cgo_enabled"]
Optional = true
Help = If set, the CGO_ENABLED environment variable will be set to 1
Inherit = true

[PluginConfig "ar_tool"]
DefaultValue = ar
Help = Path to the ar archiving tool to use
Inherit = true

[PluginConfig "please_go_tool"]
ConfigKey = PleaseGoTool
DefaultValue = //tools:please_go
Help = A path or build label for the please_go tool, an internal tool used to help build Go code
Inherit = true

[PluginConfig "delve_tool"]
DefaultValue = dlv
Inherit = true
Help = The path to the delve tool used when debugging Go targets

[PluginConfig "default_static"]
DefaultValue = false
Inherit = true
Type = bool
Help = Whether to link binaries statically by default

[PluginConfig "test_root_compat"]
DefaultValue = false
Type = bool
Help = Changes the test working directory to be the package to be more inline with how "go test" works

[PluginConfig "cpp_coverage"]
Type = bool
DefaultValue = false
Help = Whether to build C components with coverage

[PluginConfig "c_flags"]
Inherit = true
Repeatable = true
Optional = true
Help = Any additional C flags to pass to the C compiler when compling cgo rules

[PluginConfig "ld_flags"]
Inherit = true
Repeatable = true
Optional = true
Help = Any additional linker flags to pass to the linker when linking cgo libraries

[PluginConfig "legacy_imports"]
Type = bool
DefaultValue = False
Help = Reverts back to the pre-v17 behavior of Please where packages could be imported as "{dirname}/{package}" rather than just "{dirname}"

[PluginConfig "split_debug_info"]
Type = bool
Optional = true
Help = Split debug info for binaries into a separate, optional output.

[PluginConfig "strip_tool"]
DefaultValue = eu-strip
Inherit = true
Help = Tool to use to strip debug info. This is temporary and will be removed later!

[PluginConfig "feature_flags"]
Repeatable = true
Optional = true
Inherit = true
Help = Flags to enable in-development features, or toggle breaking changes

[PluginConfig "coverageredesign"]
Type = bool
DefaultValue = false
Help = Support Go 1.20's coverage redesign. Will break coverage on 1.19, required for 1.20.

[PluginConfig "buildmode"]
Optional = true
Help = The Go build mode to target (see `go help buildmode` for info)

[PluginConfig "race"]
Type = bool
DefaultValue = false
Optional = true
Help = Compile for the Go race detector

[PluginConfig "mod_file"]
Optional = true
Help = A built target for a go.mod, which can help avoid the need to pass modules via requirements to go_repo.

[PluginConfig "pkg_info"]
Type = bool
DefaultValue = true
Help = Generate pkg info for Go targets

[PluginConfig "build_tags"]
Repeatable = true
Optional = true
Help = Build tags to pass to the Go compiler

[Plugin "shell"]
Target = //plugins:shell
